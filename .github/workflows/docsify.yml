# Deploy Docsify site to GitHub Pages (Primary deployment when Docsify present)
# This takes precedence over Jekyll when both are present
name: Deploy Docsify to Pages

on:
  # # Runs on pushes targeting the default branch with Docsify-related changes
  # push:
  #   branches: ["main"]
  #   paths:
  #     - 'index.html'         # Docsify entry point
  #     - '_sidebar.md'        # Global navigation
  #     - 'guide.md'          # Dataspace guide
  #     - 'README.md'         # Homepage
  #     - 'assets/**'         # CSS, images, etc.
  #     - 'dataspaces/**'     # Dataspace content
  #     - '.nojekyll'         # GitHub Pages config
  #     - 'CNAME'             # Domain config

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Use the same concurrency group to ensure this takes precedence over Jekyll
concurrency:
  group: "pages"
  cancel-in-progress: true  # Cancel Jekyll if running

jobs:
  # Check if this should run
  check-docsify:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check for Docsify
        id: check
        run: |
          if [ -f "index.html" ] && grep -q "docsify" "index.html"; then
            echo "‚úÖ Docsify detected - proceeding with deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "üö´ No Docsify detected - skipping deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Deploy job - Docsify uses zero-build approach
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: check-docsify
    if: needs.check-docsify.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Verify Docsify files
        run: |
          echo "üì¶ Verifying Docsify setup for deployment..."
          echo "Repository contents:"
          ls -la
          echo ""
          echo "Required files check:"
          test -f index.html && echo "‚úÖ index.html found" || (echo "‚ùå index.html missing" && exit 1)
          test -f .nojekyll && echo "‚úÖ .nojekyll found" || (echo "‚ùå .nojekyll missing" && exit 1)
          test -f _sidebar.md && echo "‚úÖ _sidebar.md found" || echo "‚ö†Ô∏è  _sidebar.md missing (optional)"
          test -f README.md && echo "‚úÖ README.md found" || echo "‚ö†Ô∏è  README.md missing (optional)"
          test -d assets && echo "‚úÖ assets/ directory found" || echo "‚ö†Ô∏è  assets/ directory missing (optional)"
          test -f CNAME && echo "‚úÖ CNAME found ($(cat CNAME))" || echo "‚ö†Ô∏è  CNAME missing (will use default domain)"
          
          echo ""
          echo "Docsify configuration verification:"
          if grep -q "docsify" index.html; then
            echo "‚úÖ Docsify configuration found in index.html"
            echo "Docsify config preview:"
            grep -A 10 "window.\$docsify" index.html || echo "Custom config format detected"
          else
            echo "‚ùå Docsify configuration not found in index.html"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository root (zero-build approach)
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment verification
        run: |
          echo "üöÄ Docsify deployment completed successfully!"
          echo "üìç Deployment URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üåê Custom domain: $(test -f CNAME && cat CNAME || echo 'Not configured')"
          echo ""
          echo "üîç Deployment summary:"
          echo "  - Zero-build Docsify deployment"
          echo "  - Direct static file serving from repository root"
          echo "  - Runtime rendering in browser"
          echo "  - Search functionality enabled"

  # Post-deployment verification
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [check-docsify, deploy]
    if: needs.check-docsify.outputs.should-deploy == 'true'
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Wait for deployment to be ready
        run: sleep 60

      # Test: Basic Navigation Test
      - name: Test Main Pages Load üåê
        run: |
          echo "Testing main pages load correctly..."
          
          # Test homepage
          curl -f -s https://docs.poort8.nl > /dev/null && echo "‚úÖ Homepage loads" || echo "‚ùå Homepage failed"
          
          # Test that Docsify is working (check for docsify assets)
          curl -f -s https://docs.poort8.nl | grep -q "docsify" && echo "‚úÖ Docsify detected" || echo "‚ùå Docsify not detected"
          
          # Test main documentation sections exist (check for sidebar content)
          for section in dvu heywim keyper noodlebar; do
            if [ -f "${section}/_sidebar.md" ]; then
              echo "‚úÖ ${section} section found"
            else
              echo "‚ö†Ô∏è  ${section} section missing"
            fi
          done
